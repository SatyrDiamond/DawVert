# SPDX-FileCopyrightText: 2024 SatyrDiamond# SPDX-License-Identifier: GPL-3.0-or-laterfrom objects import globalstoreclass cvpj_midi_inst:	__slots__ = ['bank','bank_hi','device','patch','port','drum','is_key','key']	def __init__(self):		self.bank_hi = 0		self.bank = 0		self.patch = 0		self.port = 0		self.drum = False		self.is_key = False		self.key = 0		self.device = 'gm'	def from_sf2(self, bank, patch):		if bank >= 128: 			self.bank = patch			self.patch = (bank-128)			self.drum = True		else:			self.bank = bank			self.patch = patch			self.drum = False	def to_sf2(self):		if self.device != 'xg':			if self.drum:				bank = 128				patch = self.patch			else:				bank = self.bank				patch = self.patch		else:			if self.drum:				bank = 128				patch = self.patch			else:				bank = self.bank_hi				patch = self.patch		return bank, patch	def from_dict(self, indata):		self.bank_hi = 0		self.bank = 0		self.patch = 0		self.port = 0		self.drum = False		self.is_key = False		self.key = 0		self.device = 'gm'				if 'bank_hi' in indata: self.bank_hi = indata['bank_hi']		if 'bank' in indata: self.bank = indata['bank']		if 'patch' in indata: self.patch = indata['patch']		if 'port' in indata: self.port = indata['port']		if 'drum' in indata: self.drum = indata['drum']		if 'is_key' in indata: self.is_key = indata['is_key']		if 'key' in indata: self.key = indata['key']		if 'device' in indata: self.device = indata['device']	def from_dataset(self, ds_id, ds_cat, ds_obj):		dso_obj = globalstore.dataset.get_obj(ds_id, ds_cat, ds_obj)		dso_midi = dso_obj.midi if dso_obj else None		if dso_midi:			if dso_midi.used:				self.bank = dso_midi.bank				self.patch = dso_midi.patch				self.drum = dso_midi.is_drum				return True		return False	def to_visual(self, visual_obj, overwrite):		midi_dev = self.device if self.device else 'gm'		merge_needed = (not visual_obj.name or not visual_obj.color)		if overwrite or merge_needed: self.internal__to_visual(visual_obj, overwrite)	def internal__to_visual(self, visual_obj, overwrite):		m_bank_hi = self.bank_hi		m_bank = self.bank		m_inst = self.patch		m_drum = self.drum		m_dev = self.device		globalstore.dataset.load('midi', './data_main/dataset/midi.dset')		midi_dev = m_dev if m_dev else 'gm'		if midi_dev == 'xg':			startcat = 'xg_inst'			if m_drum: m_bank = 127			dset_inst = str(m_bank_hi)+'_'+str(m_bank)+'_'+str(m_inst)			dset_inst_fallb = '0_'+str(m_bank)+'_'+str(m_inst)		else:			startcat = midi_dev+'_inst' if not m_drum else midi_dev+'_drums'			dset_inst = str(m_bank_hi)+'_'+str(m_bank)+'_'+str(m_inst)			dset_inst_fallb = '0_0_'+str(m_inst)		visual_obj.from_dset('midi', startcat, dset_inst, bool(overwrite))		visual_obj.from_dset('midi', startcat, dset_inst_fallb, bool(overwrite))	def from_num(self, value):		self.drum = bool(value&0b10000000)		self.is_key = bool((value>>8)&0b10000000)		if not self.is_key: self.patch = (value%128)		else: self.key = (value%128)		self.bank = (value>>8)	def to_num(self):		outval = self.patch if not self.is_key else self.key		outval += self.bank*256		outval += int(self.drum)<<8		outval += int(self.is_key)<<16		return outval