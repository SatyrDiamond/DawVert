# SPDX-FileCopyrightText: 2024 SatyrDiamond# SPDX-License-Identifier: GPL-3.0-or-laterclass cvpj_midi_inst:	__slots__ = ['bank','bank_hi','device','patch','drum','is_key','key']	def __init__(self):		self.bank_hi = 0		self.bank = 0		self.patch = 0		self.drum = False		self.is_key = False		self.key = -1		self.device = 'gm'	def from_sf2(self, bank, patch):		if bank >= 128: 			self.bank = patch			self.patch = (bank-128)			self.drum = True		else:			self.bank = bank			self.patch = patch			self.drum = False	def to_sf2(self):		if self.drum:			if self.device != 'xg':				bank = 128				patch = self.patch			else:				bank = self.bank				patch = self.patch		else:			if self.device != 'xg':				bank = self.bank				patch = self.patch			else:				bank = self.bank_hi				patch = self.patch		#print(bank, patch, self.drum, self.device, self.bank, self.bank_hi)		return bank, patch	def from_num(self, value):		self.drum = bool(value&0b10000000)		self.is_key = bool((value>>8)&0b10000000)		if not self.is_key: self.patch = (value%128)		else: self.key = (value%128)		self.bank = (value>>8)	def to_num(self):		outval = self.patch if not self.is_key else self.key		outval += self.bank*256		outval += int(self.drum)<<8		outval += int(self.is_key)<<16		return outval